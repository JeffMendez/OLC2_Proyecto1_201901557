
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftMASMENOSleftPORDIVIDIDOleftPOTENCIAleftMODULOrightUMENOSCHAR CORDER CORIZQ DECIMAL DIVIDIDO ENTERO FALSE ID MAS MENOS MODULO NOTHING PARDER PARIZQ POR POTENCIA PTCOMA REVALUAR STRING TRUEstart : instruccionesinstrucciones    : instrucciones instruccion \n                        | instruccion instruccion : REVALUAR CORIZQ expresion CORDER PTCOMAexpresion    : expresion MAS expresion\n                    | expresion MENOS expresion\n                    | expresion POR expresion\n                    | expresion DIVIDIDO expresion\n                    | expresion POTENCIA expresion\n                    | expresion MODULO expresionexpresion : MENOS expresion %prec UMENOSexpresion : PARIZQ expresion PARDERexpresion    : ENTERO\n                    | DECIMAL\n                    | STRING\n                    | CHAR\n                    | TRUE\n                    | FALSE\n                    | NOTHING\n                    | ID'
    
_lr_action_items = {'REVALUAR':([0,2,3,5,27,],[4,4,-3,-2,-4,]),'$end':([1,2,3,5,27,],[0,-1,-3,-2,-4,]),'CORIZQ':([4,],[6,]),'MENOS':([6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,],[8,20,8,8,-13,-14,-15,-16,-17,-18,-19,-20,8,8,8,8,8,8,-11,20,-5,-6,-7,-8,-9,-10,-12,]),'PARIZQ':([6,8,9,19,20,21,22,23,24,],[9,9,9,9,9,9,9,9,9,]),'ENTERO':([6,8,9,19,20,21,22,23,24,],[10,10,10,10,10,10,10,10,10,]),'DECIMAL':([6,8,9,19,20,21,22,23,24,],[11,11,11,11,11,11,11,11,11,]),'STRING':([6,8,9,19,20,21,22,23,24,],[12,12,12,12,12,12,12,12,12,]),'CHAR':([6,8,9,19,20,21,22,23,24,],[13,13,13,13,13,13,13,13,13,]),'TRUE':([6,8,9,19,20,21,22,23,24,],[14,14,14,14,14,14,14,14,14,]),'FALSE':([6,8,9,19,20,21,22,23,24,],[15,15,15,15,15,15,15,15,15,]),'NOTHING':([6,8,9,19,20,21,22,23,24,],[16,16,16,16,16,16,16,16,16,]),'ID':([6,8,9,19,20,21,22,23,24,],[17,17,17,17,17,17,17,17,17,]),'CORDER':([7,10,11,12,13,14,15,16,17,25,28,29,30,31,32,33,34,],[18,-13,-14,-15,-16,-17,-18,-19,-20,-11,-5,-6,-7,-8,-9,-10,-12,]),'MAS':([7,10,11,12,13,14,15,16,17,25,26,28,29,30,31,32,33,34,],[19,-13,-14,-15,-16,-17,-18,-19,-20,-11,19,-5,-6,-7,-8,-9,-10,-12,]),'POR':([7,10,11,12,13,14,15,16,17,25,26,28,29,30,31,32,33,34,],[21,-13,-14,-15,-16,-17,-18,-19,-20,-11,21,21,21,-7,-8,-9,-10,-12,]),'DIVIDIDO':([7,10,11,12,13,14,15,16,17,25,26,28,29,30,31,32,33,34,],[22,-13,-14,-15,-16,-17,-18,-19,-20,-11,22,22,22,-7,-8,-9,-10,-12,]),'POTENCIA':([7,10,11,12,13,14,15,16,17,25,26,28,29,30,31,32,33,34,],[23,-13,-14,-15,-16,-17,-18,-19,-20,-11,23,23,23,23,23,-9,-10,-12,]),'MODULO':([7,10,11,12,13,14,15,16,17,25,26,28,29,30,31,32,33,34,],[24,-13,-14,-15,-16,-17,-18,-19,-20,-11,24,24,24,24,24,24,-10,-12,]),'PARDER':([10,11,12,13,14,15,16,17,25,26,28,29,30,31,32,33,34,],[-13,-14,-15,-16,-17,-18,-19,-20,-11,34,-5,-6,-7,-8,-9,-10,-12,]),'PTCOMA':([18,],[27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,5,]),'expresion':([6,8,9,19,20,21,22,23,24,],[7,25,26,28,29,30,31,32,33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> instrucciones','start',1,'p_inicio','gramatica.py',116),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones','gramatica.py',121),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones','gramatica.py',122),
  ('instruccion -> REVALUAR CORIZQ expresion CORDER PTCOMA','instruccion',5,'p_instruccion','gramatica.py',130),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion_binaria','gramatica.py',134),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion_binaria','gramatica.py',135),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion_binaria','gramatica.py',136),
  ('expresion -> expresion DIVIDIDO expresion','expresion',3,'p_expresion_binaria','gramatica.py',137),
  ('expresion -> expresion POTENCIA expresion','expresion',3,'p_expresion_binaria','gramatica.py',138),
  ('expresion -> expresion MODULO expresion','expresion',3,'p_expresion_binaria','gramatica.py',139),
  ('expresion -> MENOS expresion','expresion',2,'p_expresion_unaria','gramatica.py',155),
  ('expresion -> PARIZQ expresion PARDER','expresion',3,'p_expresion_agrupacion','gramatica.py',159),
  ('expresion -> ENTERO','expresion',1,'p_expresion_basica','gramatica.py',163),
  ('expresion -> DECIMAL','expresion',1,'p_expresion_basica','gramatica.py',164),
  ('expresion -> STRING','expresion',1,'p_expresion_basica','gramatica.py',165),
  ('expresion -> CHAR','expresion',1,'p_expresion_basica','gramatica.py',166),
  ('expresion -> TRUE','expresion',1,'p_expresion_basica','gramatica.py',167),
  ('expresion -> FALSE','expresion',1,'p_expresion_basica','gramatica.py',168),
  ('expresion -> NOTHING','expresion',1,'p_expresion_basica','gramatica.py',169),
  ('expresion -> ID','expresion',1,'p_expresion_basica','gramatica.py',170),
]
