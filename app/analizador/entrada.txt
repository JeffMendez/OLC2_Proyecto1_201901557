mutable struct Nodo
    nodoHijo;
    dato;
end;

animales = ["perro","gato","tortuga","leon"];
padre = Nodo(nothing, "juan");

println(numeros);
println(animales); 

for i in 1:10
    if i < 5
        print(i, "<5 ");
        continue;
        print("aaa");
    else
        print(i, ">=5 ");
        break;
    end;
    print("No debo salir");
end;

println("");

for letra in "ooooaaaoooo!"
    if letra == "o"
        print(letra, "=o ");
        continue;
        print("aaa");
    else
        print(letra, "!=o ");
        break;
    end;
    print("No debo salir");
end;

println("");
cadena = "oooooaooo";

for letra in cadena
    if letra == "o"
        print(letra, "=o ");
        continue;
        print("aaa");
    else
        print(letra, "!=o ");
        break;
    end;
    print("No debo salir");
end;

println("");

for dato in animales
    if dato != "tortuga"
        print(dato, "=aceptado ");
        continue;
        print("aaa");
    else
        print(dato, "=denegado ");
        break;
    end;
    print("No debo salir");
end;

println("");

for num in [9,8,7,6]
    if num != 7
        print(num, "=si ");
        continue;
        print("aaa");
    else
        print(num, "=no ");
        break;
    end;
    print("No debo salir");
end;

println("");

verdadero = true;
cont = 4;
while verdadero
    cont = cont - 1;
    print(cont, " ");
    if cont == 0
        break;
    else
        continue;
        println("no debo salir");
    end;
    println("no debo salir");
end;

println("");

anime = "God piece";
carros = ["Honda", "Hyndai", "Toyota", "Lamborguini"];
for car in carros[2:4]
    print(car, "--");
end;

println("");
println("----------Funciones--------------");

function insert(obj::Nodo, arregloRef, variable)
    variable = "Naruto";
    obj.dato = "sancho";
    arregloRef[1] = "Suzuki";

    return obj;
end;

numX = insert(padre, carros, anime);

println("---------Cambio por Ref----------");
println(padre);
println(carros);
println(anime);
println(numX.dato);


for x in 1:3
    print(x);
    return x;
end;

println("");
println("--------Primitivas-------------");
println(uppercase("wenas"));
println(lowercase("TARDES"));
println(log10(10));
println(log10(3.234));
println(log(3.234, 4));
println(log(5, 7));
println(sin(65));
println(cos(65));
println(tan(65));
println(sqrt(65));
println(float(5));
println(typeof(anime));
println("Sin: " * parse(String, sin(65)));
println(parse(Float64, (3*2/2*5)));
println("Parseos: " * parse(String, trunc(Int64, 4.894565)));
println("Str: " * string(animales));
println(length(animales));
push!(animales, "caballo");
push!(animales, carros);
#push!(animales, "cerdo");
#push!(animales, carros);
#push!(animales, padre);
#println(animales);

println("Animales: " * string(animales));

#x = pop!(animales);
#y = pop!(animales);
#pop!(animales);

carros[3] = "Ferrari";

println(x);
println(y);
println(animales);
#println(pop!(animales));

as = [1,2,3];
println(as);
for i in 1:6
    fxx = pop!(as);
    print(string(fxx) * "-");
    println(i);
end;

xtr = "AA";

function swap(i::Int64,j::Int64,arr) 
    temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
end;

arreglo = [32, 21, 7, 89, 56, 909, 109, 2, 9, 1, 44, 3, 8200, 11, 8, 10];

for i in 1:(length(arreglo))
    for j in 1:(length(arreglo) - 1)
        if arreglo[j] > arreglo[j + 1]
            swap(j, j+1, arreglo);
        end;
    end;
end;

println(["O","R","D","E","N","A","D","O"]);
println(arreglo);

mutable struct Node
    value::Int64;
    next;
end;

mutable struct List
    first;
end;

function insertFirst(list::List, value)
    aux = list.first;
    newNode = Node(value, aux);
    list.first = newNode;
end;

function insertLast(list::List, value)
    aux = list.first;
    while aux.next != nothing
        aux = aux.next;
    end;
    newNode = Node(value, nothing);
    aux.next = newNode;
end;

function printList(list::List)
    aux = list.first;
    while(aux != nothing)
        if aux.next == nothing
            println(aux.value);
        else
            print(aux.value, "->");
        end;
        aux = aux.next;
    end;
end;

lista = List(nothing);
insertFirst(lista, 5);
insertFirst(lista, 4);
insertFirst(lista, 3);
insertFirst(lista, 2);

insertLast(lista, 10);
insertLast(lista, 20);
insertLast(lista, 30);
insertLast(lista, 40);

println("---IMPRIMIR LISTA---");
printList(lista);
println("---FIN IMPRIMIR---");


arrx = [nothing, [1,2,[3,4]]];

mutable struct Obj
    dato;
end;

d1 = Obj(arrx);
xy = [d1];

x = 1;
if x == 1
    vocals = ["a","e","i",[55,66,99]];
    lte = ["q","b","c",vocals, length(vocals)];
    
    println(lte);
    arrx[1] = lte;
    vocals[1] = "u";
    lte[1] = "x";
    
    push!(vocals,"o");
    push!(vocals,"u");
    pop!(vocals);
    
end;

arrx[2][3][2] = 50;

println("---------");
println(arrx[2][3][2]);
println(d1.dato[1]);
println(xy[1].dato[1]);
println(arrx);

function test(aaa, bbb)
    println("-------");
    aaa[2][3][2] = 5000;
    println(aaa[2][3][2]);
    println(bbb);
    println("--------");
end;

test(arrx, d1);

println(arrx);

println("Struct: " * string(d1));
println("Array: " * string(arrx));
println(typeof(arrx));


nums = [1,23,4,5,5];

println(nums[2:3]);



for i in 2:4
    println(i);
end;

while 1 + 1
    print("a");
end;

if 2 <= 4 && true
    println(true);
elseif 3 > 4
    println(nothing);
elseif 3 >= 4
    println(nothing);
else
    println(false);
end;









